{"version":3,"file":"static/js/616.db048a72.chunk.js","mappings":"mQAGMA,EAAOC,EAAAA,GAAAA,EAAH,2QAcJC,EAAYD,EAAAA,GAAAA,IAAH,0GAOTE,EAAgBF,EAAAA,GAAAA,IAAH,6DAKbG,EAAsBH,EAAAA,GAAAA,IAAH,sIAOnBI,GAAcJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,mN,SCsBjB,EA9CqB,WAAO,IAAD,EACzB,GAA0BM,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAQjB,IAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaL,GAASM,MAAK,SAAAR,GAAK,OAAIC,EAASD,EAAb,GACjC,GAAE,CAACE,IAEU,OAAVF,EAAJ,CAGA,IAAQS,EAAuDT,EAAvDS,MAAOC,EAAgDV,EAAhDU,aAAcC,EAAkCX,EAAlCW,YAAaC,EAAqBZ,EAArBY,SACpCC,EC3BR,SAAmBC,GAGf,IAFA,IAAMC,EAAM,GAEHC,EAAQ,EAAGA,EAAQF,EAAOG,OAAQD,GAAO,EAAG,CACnD,IAAME,EAAOC,OAAOC,OAAON,EAAOE,IAClCD,EAAIM,KAAKH,EAAK,GACf,CACD,OAAOH,EAAIO,KAAK,KACjB,CDmBoBC,CAD0CvB,EAAXc,QAEpD,OACE,iCACE,SAAC,KAAD,CAASU,GAAE,UAAEpB,EAASqB,aAAX,QAAoB,IAA/B,UAAoC,UAACjC,EAAD,gBAAY,gBAChD,UAACE,EAAD,YACE,gBAAKgC,IAAG,UAfO,oCAeP,OAAoBf,GAAegB,IAAKlB,KAChD,UAACd,EAAD,YACE,wBAAKc,KACL,wBAAI,iBACJ,yBAAImB,OAAOlB,GAAcmB,QAAQ,GAAG,YACpC,wBAAI,eACJ,yBAAG,IAAEjB,MACL,wBAAI,YACJ,uBAAIC,WAGR,UAACjB,EAAD,YACE,yBACE,SAACC,EAAD,CAAa2B,GAAG,OAAOC,MAAOrB,EAASqB,MAAvC,SAA8C,YAEhD,yBACE,SAAC5B,EAAD,CAAa2B,GAAG,UAAUC,MAAOrB,EAASqB,MAA1C,SAAiD,kBAGrD,SAAC,EAAAK,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC,KAAD,QA3BL,CA+BF,C,+LEpDDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJiB,oCAOnB,IAAMC,EAAiB,mCAAG,oGACDF,EAAAA,EAAAA,IAAU,wBADT,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,qDAKjB7B,EAAY,mCAAG,WAAM8B,GAAN,uFACIL,EAAAA,EAAAA,IAAA,iBAAoBK,IADxB,cACbF,EADa,yBAGZA,EAASC,MAHG,2CAAH,sDAMZE,EAAmB,mCAAG,WAAMD,GAAN,uFACHL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,aADG,cACpBF,EADoB,yBAGnBA,EAASC,KAAKG,MAHK,2CAAH,sDAMnBC,EAAmB,mCAAG,WAAMH,GAAN,uFACHL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,aADG,cACpBF,EADoB,yBAEnBA,EAASC,KAAKK,SAFK,2CAAH,sDAKnBC,EAAqB,mCAAG,WAAMC,GAAN,uFACLX,EAAAA,EAAAA,IAAU,gBAAiB,CAChDY,OAAQ,CACND,MAAOA,KAHiB,cACtBR,EADsB,yBAMrBA,EAASC,KAAKK,SANO,2CAAH,qD","sources":["pages/MovieDetails/MovieDetailStyled.jsx","pages/MovieDetails/MovieDetails.jsx","utils/genresMashine.js","utils/FilmsAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nconst Link = styled.p`\n  display: inline-block;\n  padding:10px;\n  margin:10px;\n  border-radius: 5px;\n  box-shadow:0 0 15px 4px rgba(0,0,0,0.06);\n  font-weight: 700;\n  color: #010101;\n  :hover, :active {\n    background-color: #9b0027;\n    color: #fff;\n  }\n`;\n\nconst MovieInfo = styled.div`\n  display: flex;\n  margin-top: 10px;\n\n  box-shadow: 0px 10px 5px 0px #9b0027;\n`;\n\nconst MovieTextInfo = styled.div`\n  padding: 20px;\n  padding-top: 0;\n`;\n\nconst AdditionalMovieInfo = styled.div`\n  padding-top: 5px;\n  padding-bottom: 5px;\n  box-shadow: 0px 10px 5px 0px #9b0027;\n  margin-bottom: 20px;\n`;\n\nconst NavLinkItem = styled(NavLink)`\n  text-decoration: none;\n  color: #010101;\n  padding: 10px;\n\n  :hover:not(.active) {\n    color: #9b0027;\n  }\n\n  &.active {\n    color: #fff;\n    background-color: #9b0027;\n  }\n`;\n\nexport { Link, NavLinkItem, AdditionalMovieInfo, MovieInfo, MovieTextInfo };","import { Suspense, useEffect, useState } from 'react';\nimport { useParams, NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { getMovieByID } from 'utils/FilmsAPI';\nimport { getGenres } from 'utils/genresMashine';\nimport {\n  Link,\n  NavLinkItem,\n  AdditionalMovieInfo,\n  MovieInfo,\n  MovieTextInfo,\n} from 'pages/MovieDetails/MovieDetailStyled';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w300/';\n\n  useEffect(() => {\n    getMovieByID(movieId).then(movie => setMovie(movie));\n  }, [movieId]);\n\n  if (movie === null) {\n    return;\n  }\n  const { title, vote_average, poster_path, overview, genres } = movie;\n  const genresString = getGenres(genres);\n  return (\n    <>\n      <NavLink to={location.state ?? '/'}><Link>{`<-`}Go back</Link></NavLink>\n      <MovieInfo>\n        <img src={`${BASE_IMG_URL}${poster_path}`} alt={title} />\n        <MovieTextInfo>\n          <h1>{title}</h1>\n          <h2>User csore:</h2>\n          <p>{Number(vote_average).toFixed(2)} / 10</p>\n          <h2>Owerview:</h2>\n          <p> {overview}</p>\n          <h2>Genres</h2>\n          <p>{genresString}</p>\n        </MovieTextInfo>\n      </MovieInfo>\n      <AdditionalMovieInfo>\n        <h3>\n          <NavLinkItem to=\"cast\" state={location.state}>Cast</NavLinkItem>\n        </h3>\n        <h3>\n          <NavLinkItem to=\"reviews\" state={location.state}>Reviews</NavLinkItem>\n        </h3>\n      </AdditionalMovieInfo>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;","function getGenres(genres) {\n    const arr = [];\n  \n    for (let index = 0; index < genres.length; index+=1) {\n      const name = Object.values(genres[index]);\n      arr.push(name[1]);\n    }\n    return arr.join(', ');\n  }\n  \n  export { getGenres };","import axios from 'axios';\n\nconst AUTH_TOKEN = '3cfddd5e97fd8d1a3fdf959358de6593';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: AUTH_TOKEN,\n};\n\nconst getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/week');\n  return response.data;\n};\n\nconst getMovieByID = async id => {\n  const response = await axios.get(`/movie/${id}`);\n\n  return response.data;\n};\n\nconst getMovieCreditsByID = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n\n  return response.data.cast;\n};\n\nconst getMovieReviewsByID = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data.results;\n};\n\nconst getMovieByQuerySearch = async query => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      query: query,\n    },\n  });\n  return response.data.results;\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByID,\n  getMovieCreditsByID,\n  getMovieReviewsByID,\n  getMovieByQuerySearch,\n};"],"names":["Link","styled","MovieInfo","MovieTextInfo","AdditionalMovieInfo","NavLinkItem","NavLink","useState","movie","setMovie","movieId","useParams","location","useLocation","useEffect","getMovieByID","then","title","vote_average","poster_path","overview","genresString","genres","arr","index","length","name","Object","values","push","join","getGenres","to","state","src","alt","Number","toFixed","Suspense","fallback","axios","api_key","getTrendingMovies","response","data","id","getMovieCreditsByID","cast","getMovieReviewsByID","results","getMovieByQuerySearch","query","params"],"sourceRoot":""}